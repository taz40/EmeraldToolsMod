package com.piwalker.emeraldtools.tileentity;

import java.util.Arrays;

import com.piwalker.emeraldtools.EmeraldTools;
import com.piwalker.emeraldtools.client.handler.GuiHandler;
import com.piwalker.emeraldtools.crafting.EmeraldToolsRecipe;
import com.piwalker.emeraldtools.crafting.EmeraldToolsRegistry;
import com.piwalker.emeraldtools.init.ModBlocks;
import com.piwalker.emeraldtools.references.Names;
import com.piwalker.emeraldtools.utility.LogHelper;

import cpw.mods.fml.common.network.ByteBufUtils;
import io.netty.buffer.ByteBuf;
import net.minecraft.block.Block;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.world.World;

/**
 * Created by SamuelPiWalker on 7/23/2015.
 */
public class TileEntityEmeraldCore extends TileEntityEmeraldTools implements IInventory {
    public boolean isMultiblock = false;
    private ItemStack[] items = new ItemStack[5];
    public int timeUntilCrafted = -1;
    public boolean firstrun = true;
    public ItemStack out;

    @Override
    public void updateEntity(){
        super.updateEntity();
        if(firstrun){
            checkForMultiblock();
            firstrun = false;
        }
        if(timeUntilCrafted != -1){
        	if(timeUntilCrafted <= 0){
        		timeUntilCrafted = -1;
        		items[4] = new ItemStack(out.getItem());
        		items[4].stackSize = out.stackSize;
        		items[4].setItemDamage(out.getItemDamage());
        		out = null;
        	}else{
        		timeUntilCrafted--;
        	}
        }
    }
    
    public void startCraft(){
    	int emeralds = 0;
    	for(int i = 0; i < 4; i++){
    		if(items[i] != null && items[i].getItem() == Items.emerald)
    			emeralds++;
    	}
    	for(EmeraldToolsRecipe r : EmeraldToolsRegistry.getRecipes()){
    		if(emeralds == r.emeralds && items[4] != null && items[4].getItem() == r.other.getItem()){
    			out = r.out;
    			this.timeUntilCrafted = r.time*20;
    			
    			for(int i = 0; i < 4; i++){
    	    		if(items[i] != null && items[i].getItem() == Items.emerald)
    	    			items[i] = null;
    	    	}
    			
    			items[4] = null;
    			
    		}
    	}
    }



    public void rightClick(World world,int x,int y,int z,EntityPlayer player){
        if(isMultiblock && !world.isRemote){
            player.openGui(EmeraldTools.instance, GuiHandler.GuiIDs.CHRYSTAL_ALTER.ordinal(), world, xCoord, yCoord, zCoord);
            LogHelper.info("Click");
        }
    }

    public void checkForMultiblock(){
        LogHelper.info("checking multiblock");
        int x = xCoord;
        int y = yCoord;
        int z = zCoord;
        if(testBlock(x+1, y, z) && testBlock(x+1, y, z+1) && testBlock(x, y, z+1) && testBlock(x-1, y, z+1) && testBlock(x-1, y, z)
                && testBlock(x, y, z-1) && testBlock(x-1, y, z-1) && testBlock(x+2, y, z) && testBlock(x+2, y+1, z)
                && testBlock(x+3, y+1, z) && testBlock(x+3, y+2, z) && testBlock(x+3, y+3, z) && testBlock(x+2, y+3, z)
                && testBlock(x-2, y, z) && testBlock(x-2, y+1, z) && testBlock(x-3, y+1, z) && testBlock(x-3, y+2, z)
                && testBlock(x-3, y+3, z) && testBlock(x-2, y+3, z) /**/&& testBlock(x, y, z+2) && testBlock(x, y+1, z+2)
                && testBlock(x, y+1, z+3) && testBlock(x, y+2, z+3) && testBlock(x, y+3, z+3) && testBlock(x, y+3, z+2)
                && testBlock(x, y, z-2) && testBlock(x, y+1, z-2) && testBlock(x, y+1, z-3) && testBlock(x, y+2, z-3)
                && testBlock(x, y+3, z-3) && testBlock(x, y+3, z-2)){
            isMultiblock = true;
        }else{
            isMultiblock = false;
        }
        worldObj.markBlockForUpdate(x, y, z);
    }

    private boolean testBlock(int x, int y, int z){
        return testBlock(x, y, z, ModBlocks.emeraldStone);
    }

    private boolean testBlock(int x, int y, int z, Block block){
        if(worldObj.getBlock(x, y, z) == block){
            return true;
        }
        return false;
    }



    @Override
    public void readFromNBT(NBTTagCompound nbt) {
        super.readFromNBT(nbt);
        Arrays.fill(items, null);
        NBTTagList itemsTag = nbt.getTagList("items", 10);

        for(int i = 0; i < itemsTag.tagCount(); i++) {
            NBTTagCompound tag = itemsTag.getCompoundTagAt(i);
            int index = tag.getByte("index");
            if(index >= 0 && index < items.length) {
                items[index] = ItemStack.loadItemStackFromNBT(tag);
            }
        }
    }


    @Override
    public void writeToNBT(NBTTagCompound nbt) {
        super.writeToNBT(nbt);
        NBTTagList itemsTag = new NBTTagList();
        for(int i = 0; i < items.length; i++){
            ItemStack stack = items[i];
            if (stack != null) {
                NBTTagCompound itemsTag1 = new NBTTagCompound();
                itemsTag1.setByte("index", (byte) i);
                stack.writeToNBT(itemsTag1);
                itemsTag.appendTag(itemsTag1);
            }
        }
        nbt.setTag("items", itemsTag);
    }

    @Override
    public void writeToPacket(ByteBuf buf) {
        buf.writeBoolean(isMultiblock);
        for(int i = 0; i < items.length; i++) {
            ByteBufUtils.writeItemStack(buf, items[i]);
        }
    }

    @Override
    public void readFromPacket(ByteBuf buf) {
        isMultiblock = buf.readBoolean();
        for(int i = 0; i < items.length; i++) {
            items[i] = ByteBufUtils.readItemStack(buf);
        }
    }

    // start of IInventory Meathods

    /**
     * Returns the number of slots in the inventory.
     */
    public int getSizeInventory()
    {
        return items.length;
    }

    /**
     * Returns the stack in slot i
     */
    public ItemStack getStackInSlot(int slot)
    {
        return this.items[slot];
    }

    /**
     * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a
     * new stack.
     */
    public ItemStack decrStackSize(int slot, int amount)
    {
        if (this.items[slot] != null)
        {
            ItemStack itemstack;

            if (this.items[slot].stackSize <= amount)
            {
                itemstack = this.items[slot];
                this.setInventorySlotContents(slot, null);
                this.markDirty();
                return itemstack;
            }
            else
            {
                itemstack = this.items[slot].splitStack(amount);

                if (this.items[slot].stackSize == 0)
                {
                    this.setInventorySlotContents(slot, null);
                }

                this.markDirty();
                return itemstack;
            }
        }
        else
        {
            return null;
        }
    }

    /**
     * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem -
     * like when you close a workbench GUI.
     */
    public ItemStack getStackInSlotOnClosing(int slot)
    {
        if (this.items[slot] != null)
        {
            ItemStack itemstack = this.items[slot];
            this.items[slot] = null;
            return itemstack;
        }
        else
        {
            return null;
        }
    }

    /**
     * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
     */
    public void setInventorySlotContents(int slot, ItemStack stack)
    {
        this.items[slot] = stack;

        if (stack != null && stack.stackSize > this.getInventoryStackLimit())
        {
            stack.stackSize = this.getInventoryStackLimit();
        }

        this.markDirty();
        worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
    }

    /**
     * Returns the name of the inventory
     */
    public String getInventoryName()
    {
        return  Names.Inventories.CRYSTALALTAR;
    }

    /**
     * Returns if the inventory is named
     */
    public boolean hasCustomInventoryName()
    {
        return false;
    }

    /**
     * Returns the maximum stack size for a inventory slot.
     */
    public int getInventoryStackLimit()
    {
        return 64;
    }

    /**
     * Do not make give this method the name canInteractWith because it clashes with Container
     */
    public boolean isUseableByPlayer(EntityPlayer player)
    {
        return this.worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : player.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
    }

    public void openInventory() {}

    public void closeInventory() {}

    /**
     * Returns true if automation is allowed to insert the given stack (ignoring stack size) into the given slot.
     */
    public boolean isItemValidForSlot(int slot, ItemStack stack)
    {
        return stack != null;
    }
}
